import com.google.gson.*;
import com.google.gson.reflect.TypeToken;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.lang.reflect.Type;
import java.util.*;

class Room {
    int roomNumber;
    boolean isBooked;
    String customerName;
    int nights;
    double pricePerNight;

    public Room(int roomNumber, double pricePerNight) {
        this.roomNumber = roomNumber;
        this.isBooked = false;
        this.customerName = "";
        this.nights = 0;
        this.pricePerNight = pricePerNight;
    }

    public double calculateBill() {
        return nights * pricePerNight;
    }
}

public class HotelManagementSwing extends JFrame {
    private Map<Integer, Room> rooms = new HashMap<>();
    private JTable table;
    private DefaultTableModel tableModel;
    private final String DATA_FILE = "rooms.json";
    private Gson gson = new GsonBuilder().setPrettyPrinting().create();

    public HotelManagementSwing() {
        setTitle("Hotel Management System");
        setSize(700, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        loadRooms();

        // GUI components
        JPanel panelTop = new JPanel();
        JButton btnBook = new JButton("Book Room");
        JButton btnCheckout = new JButton("Check-Out Room");
        JButton btnRefresh = new JButton("Refresh Table");

        panelTop.add(btnBook);
        panelTop.add(btnCheckout);
        panelTop.add(btnRefresh);
        add(panelTop, BorderLayout.NORTH);

        // Table to show rooms
        String[] columns = {"Room #", "Status", "Customer", "Nights", "Price per Night"};
        tableModel = new DefaultTableModel(columns, 0);
        table = new JTable(tableModel);
        add(new JScrollPane(table), BorderLayout.CENTER);

        refreshTable();

        // Button actions
        btnBook.addActionListener(e -> bookRoomDialog());
        btnCheckout.addActionListener(e -> checkoutRoomDialog());
        btnRefresh.addActionListener(e -> refreshTable());

        setVisible(true);
    }

    private void loadRooms() {
        File file = new File(DATA_FILE);
        if (file.exists()) {
            try (Reader reader = new FileReader(file)) {
                Type type = new TypeToken<Map<Integer, Room>>() {}.getType();
                rooms = gson.fromJson(reader, type);
            } catch (Exception e) {
                e.printStackTrace();
                initializeRooms();
            }
        } else {
            initializeRooms();
        }
    }

    private void saveRooms() {
        try (Writer writer = new FileWriter(DATA_FILE)) {
            gson.toJson(rooms, writer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initializeRooms() {
        rooms.put(101, new Room(101, 100));
        rooms.put(102, new Room(102, 120));
        rooms.put(103, new Room(103, 150));
        rooms.put(104, new Room(104, 200));
        rooms.put(105, new Room(105, 250));
        saveRooms();
    }

    private void refreshTable() {
        tableModel.setRowCount(0);
        for (Room room : rooms.values()) {
            tableModel.addRow(new Object[]{
                    room.roomNumber,
                    room.isBooked ? "Booked" : "Available",
                    room.customerName,
                    room.nights,
                    room.pricePerNight
            });
        }
    }

    private void bookRoomDialog() {
        JTextField txtRoom = new JTextField();
        JTextField txtName = new JTextField();
        JTextField txtNights = new JTextField();
        Object[] message = {
                "Room Number:", txtRoom,
                "Customer Name:", txtName,
                "Number of Nights:", txtNights
        };
        int option = JOptionPane.showConfirmDialog(this, message, "Book Room", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                int roomNumber = Integer.parseInt(txtRoom.getText());
                String name = txtName.getText().trim();
                int nights = Integer.parseInt(txtNights.getText());

                Room room = rooms.get(roomNumber);
                if (room == null) {
                    JOptionPane.showMessageDialog(this, "Room does not exist!");
                    return;
                }
                if (room.isBooked) {
                    JOptionPane.showMessageDialog(this, "Room is already booked!");
                    return;
                }

                room.isBooked = true;
                room.customerName = name;
                room.nights = nights;
                saveRooms();
                refreshTable();
                JOptionPane.showMessageDialog(this, "Room booked successfully!");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input!");
            }
        }
    }

    private void checkoutRoomDialog() {
        String input = JOptionPane.showInputDialog(this, "Enter Room Number to Check-Out:");
        if (input != null) {
            try {
                int roomNumber = Integer.parseInt(input);
                Room room = rooms.get(roomNumber);
                if (room == null || !room.isBooked) {
                    JOptionPane.showMessageDialog(this, "Room is not booked!");
                    return;
                }
                double bill = room.calculateBill();
                JOptionPane.showMessageDialog(this, "Customer: " + room.customerName + "\nTotal Bill: $" + bill);

                // Reset room
                room.isBooked = false;
                room.customerName = "";
                room.nights = 0;
                saveRooms();
                refreshTable();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input!");
            }
        }
    }

    public static void main(String[] args) {
        // Make sure to include Gson library in your project
        SwingUtilities.invokeLater(HotelManagementSwing::new);
    }
}
